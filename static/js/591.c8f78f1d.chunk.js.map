{"version":3,"file":"static/js/591.c8f78f1d.chunk.js","mappings":"+SAWMA,EAAiBC,EAAAA,SAAaC,MAAM,CACxCC,MAAOF,EAAAA,SAAaE,MAAM,oBAAoBC,SAAS,qBACvDC,SAAUJ,EAAAA,SAEPK,QACC,iEACA,8HAEDF,SAAS,0BAGRG,EAAgB,CACpBJ,MAAO,GACPE,SAAU,IA0DZ,EAvDkB,WAAO,IAAD,IACtB,GAA4BG,EAAAA,EAAAA,UAASD,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnBJ,EAAUI,EACX,EAOD,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYjB,KAJtBkB,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAKf,OACE,UAACE,EAAA,EAAD,CACEC,UAAU,OACVC,aAAa,MACbC,KAAK,aACLC,SAAUP,GAlBW,SAAAV,GACvBE,GAASgB,EAAAA,EAAAA,IAAMlB,IACfC,EAAUH,EACX,IAWC,WAME,SAACqB,EAAA,GAAD,gBACEH,KAAK,QACLI,MAAM,aACNC,YAAY,gBACZ1B,UAAQ,GACJc,EAAS,UALf,IAMEa,QAAOX,EAAOjB,MACd6B,WAAU,UAAEZ,EAAOjB,aAAT,aAAE,EAAc8B,QAC1BnB,MAAOL,EAAON,MACd+B,SAAU,SAAAC,GAAC,OAAItB,GAAa,kBAAKJ,GAAN,IAAcN,MAAOgC,EAAEC,OAAOtB,QAA9C,MAEb,SAACc,EAAA,GAAD,gBACEH,KAAK,WACLI,MAAM,gBACNC,YAAY,SACZ1B,UAAQ,GACJc,EAAS,aALf,IAMEa,QAAOX,EAAOf,SACd2B,WAAU,UAAEZ,EAAOf,gBAAT,aAAE,EAAiB4B,QAC7BnB,MAAOL,EAAOJ,SACd6B,SAAU,SAAAC,GAAC,OAAItB,GAAa,kBAAKJ,GAAN,IAAcJ,SAAU8B,EAAEC,OAAOtB,QAAjD,MAEb,SAACuB,EAAA,EAAD,CAAQC,KAAK,SAAb,sBAGL,ECtED,EARc,WACZ,OACE,2BACE,SAAC,EAAD,KAGL,C","sources":["components/LogInForm/LogInForm.jsx","pages/LogIn.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport { logIn } from 'redux/auth/operations';\n\nimport { Box } from '@mui/system';\nimport { Button, TextField } from '@mui/material';\n\nconst registerSchema = yup.object().shape({\n  email: yup.string().email('Email is invalid').required('Email is required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{6,12}$/,\n      'Password must consist of 6-12 characters including at least 1 uppercase, 1 lowercase, 1 number and 1 symbol (!@#$%^&*_=+-)'\n    )\n    .required('Password is required'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LogInForm = () => {\n  const [values, setValues] = useState(initialValues);\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    setValues(value);\n  };\n\n  const handleFormSubmit = values => {\n    dispatch(logIn(values));\n    setValues(initialValues);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      autoComplete=\"off\"\n      name=\"Login Form\"\n      onSubmit={handleSubmit(handleFormSubmit)}\n    >\n      <TextField\n        name=\"email\"\n        label=\"User email\"\n        placeholder=\"mail@mail.com\"\n        required\n        {...register('email')}\n        error={errors.email ? true : false}\n        helperText={errors.email?.message}\n        value={values.email}\n        onChange={e => handleChange({ ...values, email: e.target.value })}\n      />\n      <TextField\n        name=\"password\"\n        label=\"User password\"\n        placeholder=\"******\"\n        required\n        {...register('password')}\n        error={errors.password ? true : false}\n        helperText={errors.password?.message}\n        value={values.password}\n        onChange={e => handleChange({ ...values, password: e.target.value })}\n      />\n      <Button type=\"submit\">Submit</Button>\n    </Box>\n  );\n};\n\nexport default LogInForm;\n","import LogInForm from 'components/LogInForm';\n\nconst LogIn = () => {\n  return (\n    <main>\n      <LogInForm />\n    </main>\n  );\n};\n\nexport default LogIn;\n"],"names":["registerSchema","yup","shape","email","required","password","matches","initialValues","useState","values","setValues","dispatch","useDispatch","handleChange","value","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Box","component","autoComplete","name","onSubmit","logIn","TextField","label","placeholder","error","helperText","message","onChange","e","target","Button","type"],"sourceRoot":""}