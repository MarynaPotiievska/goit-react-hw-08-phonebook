{"version":3,"file":"static/js/519.65a38b87.chunk.js","mappings":"qSAWMA,EAAiBC,EAAAA,SAAaC,MAAM,CACxCC,KAAMF,EAAAA,SAEHG,IAAI,EAAG,sCACPC,QACC,yHACA,0IAEDC,SAAS,oBACZC,MAAON,EAAAA,SAAaM,MAAM,oBAAoBD,SAAS,qBACvDE,SAAUP,EAAAA,SAEPI,QACC,iEACA,8HAEDC,SAAS,0BAGRG,EAAgB,CACpBN,KAAM,GACNI,MAAO,GACPC,SAAU,IAqEZ,EAlEqB,WAAO,IAAD,MACzB,GAA4BE,EAAAA,EAAAA,UAASD,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnBJ,EAAUI,EACX,EAQD,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYnB,KAJtBoB,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAKf,OACE,UAACE,EAAA,EAAD,CACEC,UAAU,OACVC,aAAa,MACbvB,KAAK,gBACLwB,SAAUN,GAnBW,SAACO,EAAGjB,GAC3B,IAAMkB,EAAOD,EAAEE,OACfjB,GAASkB,EAAAA,EAAAA,IAAOpB,IAChBkB,EAAKG,OACN,IAWC,WAME,SAACC,EAAA,GAAD,gBACE9B,KAAK,OACL+B,MAAM,YACNC,YAAY,YACZ7B,UAAQ,GACJc,EAAS,SALf,IAMEgB,QAAOd,EAAOnB,KACdkC,WAAU,UAAEf,EAAOnB,YAAT,aAAE,EAAamC,QACzBtB,MAAOL,EAAOR,KACdoC,SAAU,SAAAX,GAAC,OAAIb,GAAa,kBAAKJ,GAAN,IAAcR,KAAMyB,EAAEE,OAAOd,QAA7C,MAEb,SAACiB,EAAA,GAAD,gBACE9B,KAAK,QACL+B,MAAM,aACNC,YAAY,gBACZ7B,UAAQ,GACJc,EAAS,UALf,IAMEgB,QAAOd,EAAOf,MACd8B,WAAU,UAAEf,EAAOf,aAAT,aAAE,EAAc+B,QAC1BtB,MAAOL,EAAOJ,MACdgC,SAAU,SAAAX,GAAC,OAAIb,GAAa,kBAAKJ,GAAN,IAAcJ,MAAOqB,EAAEE,OAAOd,QAA9C,MAEb,SAACiB,EAAA,GAAD,gBACE9B,KAAK,WACL+B,MAAM,gBACNC,YAAY,SACZ7B,UAAQ,GACJc,EAAS,aALf,IAMEgB,QAAOd,EAAOd,SACd6B,WAAU,UAAEf,EAAOd,gBAAT,aAAE,EAAiB8B,QAC7BtB,MAAOL,EAAOH,SACd+B,SAAU,SAAAX,GAAC,OAAIb,GAAa,kBAAKJ,GAAN,IAAcH,SAAUoB,EAAEE,OAAOd,QAAjD,OAIlB,EC3FD,EAPiB,WACf,OACE,2BACE,SAAC,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport { signUp } from 'redux/auth/operations';\n\nimport { Box } from '@mui/system';\nimport { TextField } from '@mui/material';\n\nconst registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  email: yup.string().email('Email is invalid').required('Email is required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{6,12}$/,\n      'Password must consist of 6-12 characters including at least 1 uppercase, 1 lowercase, 1 number and 1 symbol (!@#$%^&*_=+-)'\n    )\n    .required('Password is required'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegisterForm = () => {\n  const [values, setValues] = useState(initialValues);\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    setValues(value);\n  };\n\n  const handleFormSubmit = (e, values) => {\n    const form = e.target;\n    dispatch(signUp(values));\n    form.reset();\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      autoComplete=\"off\"\n      name=\"Register Form\"\n      onSubmit={handleSubmit(handleFormSubmit)}\n    >\n      <TextField\n        name=\"name\"\n        label=\"User name\"\n        placeholder=\"Rob Stark\"\n        required\n        {...register('name')}\n        error={errors.name ? true : false}\n        helperText={errors.name?.message}\n        value={values.name}\n        onChange={e => handleChange({ ...values, name: e.target.value })}\n      />\n      <TextField\n        name=\"email\"\n        label=\"User email\"\n        placeholder=\"mail@mail.com\"\n        required\n        {...register('email')}\n        error={errors.email ? true : false}\n        helperText={errors.email?.message}\n        value={values.email}\n        onChange={e => handleChange({ ...values, email: e.target.value })}\n      />\n      <TextField\n        name=\"password\"\n        label=\"User password\"\n        placeholder=\"******\"\n        required\n        {...register('password')}\n        error={errors.password ? true : false}\n        helperText={errors.password?.message}\n        value={values.password}\n        onChange={e => handleChange({ ...values, password: e.target.value })}\n      />\n    </Box>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm';\n\nconst Register = () => {\n  return (\n    <main>\n      <RegisterForm />\n    </main>\n  );\n};\nexport default Register;\n"],"names":["registerSchema","yup","shape","name","min","matches","required","email","password","initialValues","useState","values","setValues","dispatch","useDispatch","handleChange","value","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Box","component","autoComplete","onSubmit","e","form","target","signUp","reset","TextField","label","placeholder","error","helperText","message","onChange"],"sourceRoot":""}