{"version":3,"file":"static/js/519.8d31facd.chunk.js","mappings":"kUAWMA,EAAiBC,EAAAA,SAAaC,MAAM,CACxCC,KAAMF,EAAAA,SAEHG,IAAI,EAAG,sCACPC,QACC,yHACA,0IAEDC,SAAS,oBACZC,MAAON,EAAAA,SAAaM,MAAM,oBAAoBD,SAAS,qBACvDE,SAAUP,EAAAA,SAEPI,QACC,iEACA,8HAEDC,SAAS,0BAGRG,EAAgB,CACpBN,KAAM,GACNI,MAAO,GACPC,SAAU,IAiGZ,EA9FqB,WAAO,IAAD,MACzB,GAA4BE,EAAAA,EAAAA,UAASD,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnBJ,EAAUI,EACX,EAQD,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYnB,KAJtBoB,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAKf,OACE,UAACE,EAAA,EAAD,CAAWC,GAAI,CAAEC,QAAS,QAA1B,WACE,SAACC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAQ,KACRJ,GAAI,CACFK,UAAW,SACXC,eAAgB,YAChBC,WAAY,QANhB,sBAWA,UAACC,EAAA,EAAD,CACEC,UAAU,OACVC,aAAa,MACbhC,KAAK,gBACLiC,SAAUf,GA/BS,SAAAV,GACvB0B,QAAQC,IAAI,SAAU3B,GACtBE,GAAS0B,EAAAA,EAAAA,IAAO5B,IAChBC,EAAUH,EACX,IA4BKgB,GAAI,CACFe,QAAS,OACTC,cAAe,SACfC,WAAY,SACZhB,QAAS,OACT,uBAAwB,CAAEc,QAAS,QAASG,EAAG,EAAGC,MAAO,SAV7D,WAaE,SAACC,EAAA,GAAD,gBACE1C,KAAK,OACL2C,MAAM,YACNC,GAAG,YACHC,YAAY,YACZ1C,UAAQ,EACR2C,WAAS,GACL7B,EAAS,SAPf,IAQE8B,QAAO5B,EAAOnB,KACdgD,WAAU,UAAE7B,EAAOnB,YAAT,aAAE,EAAaiD,QACzBpC,MAAOL,EAAOR,KACdkD,SAAU,SAAAC,GAAC,OAAIvC,GAAa,kBAAKJ,GAAN,IAAcR,KAAMmD,EAAEC,OAAOvC,QAA7C,MAEb,SAAC6B,EAAA,GAAD,gBACE1C,KAAK,QACL2C,MAAM,aACNU,KAAK,QACLT,GAAG,aACHC,YAAY,gBACZ1C,UAAQ,GACJc,EAAS,UAPf,IAQE8B,QAAO5B,EAAOf,MACd4C,WAAU,UAAE7B,EAAOf,aAAT,aAAE,EAAc6C,QAC1BpC,MAAOL,EAAOJ,MACd8C,SAAU,SAAAC,GAAC,OAAIvC,GAAa,kBAAKJ,GAAN,IAAcJ,MAAO+C,EAAEC,OAAOvC,QAA9C,MAEb,SAAC6B,EAAA,GAAD,gBACE1C,KAAK,WACL2C,MAAM,gBACNU,KAAK,WACLR,YAAY,SACZ1C,UAAQ,GACJc,EAAS,aANf,IAOE8B,QAAO5B,EAAOd,SACd2C,WAAU,UAAE7B,EAAOd,gBAAT,aAAE,EAAiB4C,QAC7BpC,MAAOL,EAAOH,SACd6C,SAAU,SAAAC,GAAC,OAAIvC,GAAa,kBAAKJ,GAAN,IAAcH,SAAU8C,EAAEC,OAAOvC,QAAjD,MAEb,SAACyC,EAAA,EAAD,CAAQD,KAAK,SAAS3B,QAAQ,YAAYJ,GAAI,CAAEiC,OAAQ,UAAxD,yBAMP,ECvHD,EAPiB,WACf,OACE,2BACE,SAAC,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport { signUp } from 'redux/auth/operations';\n\nimport { Box } from '@mui/system';\nimport { Button, Container, TextField, Typography } from '@mui/material';\n\nconst registerSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  email: yup.string().email('Email is invalid').required('Email is required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{7,12}$/,\n      'Password must consist of 7-12 characters including at least 1 uppercase, 1 lowercase, 1 number and 1 symbol (!@#$%^&*_=+-)'\n    )\n    .required('Password is required'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegisterForm = () => {\n  const [values, setValues] = useState(initialValues);\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    setValues(value);\n  };\n\n  const handleFormSubmit = values => {\n    console.log('values', values);\n    dispatch(signUp(values));\n    setValues(initialValues);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n\n  return (\n    <Container sx={{ padding: '12px' }}>\n      <Typography\n        color=\"primary\"\n        variant=\"h5\"\n        sx={{\n          textAlign: 'center',\n          textDecoration: 'underline',\n          fontWeight: 'bold',\n        }}\n      >\n        Sign up\n      </Typography>\n      <Box\n        component=\"form\"\n        autoComplete=\"off\"\n        name=\"Register Form\"\n        onSubmit={handleSubmit(handleFormSubmit)}\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          padding: '12px',\n          '& .MuiTextField-root': { display: 'block', m: 1, width: '25ch' },\n        }}\n      >\n        <TextField\n          name=\"name\"\n          label=\"User name\"\n          id=\"user-name\"\n          placeholder=\"Rob Stark\"\n          required\n          autoFocus\n          {...register('name')}\n          error={errors.name ? true : false}\n          helperText={errors.name?.message}\n          value={values.name}\n          onChange={e => handleChange({ ...values, name: e.target.value })}\n        />\n        <TextField\n          name=\"email\"\n          label=\"User email\"\n          type=\"email\"\n          id=\"user-email\"\n          placeholder=\"mail@mail.com\"\n          required\n          {...register('email')}\n          error={errors.email ? true : false}\n          helperText={errors.email?.message}\n          value={values.email}\n          onChange={e => handleChange({ ...values, email: e.target.value })}\n        />\n        <TextField\n          name=\"password\"\n          label=\"User password\"\n          type=\"password\"\n          placeholder=\"******\"\n          required\n          {...register('password')}\n          error={errors.password ? true : false}\n          helperText={errors.password?.message}\n          value={values.password}\n          onChange={e => handleChange({ ...values, password: e.target.value })}\n        />\n        <Button type=\"submit\" variant=\"contained\" sx={{ margin: '0 auto' }}>\n          Submit\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm';\n\nconst Register = () => {\n  return (\n    <main>\n      <RegisterForm />\n    </main>\n  );\n};\nexport default Register;\n"],"names":["registerSchema","yup","shape","name","min","matches","required","email","password","initialValues","useState","values","setValues","dispatch","useDispatch","handleChange","value","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Container","sx","padding","Typography","color","variant","textAlign","textDecoration","fontWeight","Box","component","autoComplete","onSubmit","console","log","signUp","display","flexDirection","alignItems","m","width","TextField","label","id","placeholder","autoFocus","error","helperText","message","onChange","e","target","type","Button","margin"],"sourceRoot":""}