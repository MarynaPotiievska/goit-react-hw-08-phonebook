{"version":3,"file":"static/js/540.a7f80922.chunk.js","mappings":"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","sources":["redux/selectors.js","components/ContactForm/ContactForm.jsx","components/EditForm/EditForm.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter.value;\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = state => {\n\tconst filter = selectFilter(state);\n\tconst contacts = selectContacts(state);\n    if (filter !== '') {\n      const filteredArr = contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter)\n      );\n      return filteredArr;\n    } else {\n      return contacts;\n    }\n  };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport { addContact } from 'redux/contactsOperations';\nimport { selectContacts } from 'redux/selectors';\n\nimport { Box } from '@mui/system';\nimport { Button, TextField } from '@mui/material';\n\nexport const contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  number: yup\n    .string()\n    .phone('UA', 'Number must be a valid phone number for region UA.')\n    .required('Phone is required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [values, setValues] = useState(initialValues);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    setValues(value);\n  };\n\n  const handleFormSubmit = values => {\n    const isInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isInContacts === undefined) {\n      dispatch(addContact(values));\n    } else {\n      alert(`${values.name} is already in contacts.`);\n    }\n    setValues(initialValues);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(contactSchema),\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      autoComplete=\"off\"\n      name=\"Add Contact Form\"\n      onSubmit={handleSubmit(handleFormSubmit)}\n      sx={{\n        width: '700px',\n        margin: '0 auto',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-around',\n        columnGap: '32px',\n        border: `1px solid #093C01`,\n        borderRadius: '4px',\n        mb: '16px',\n        padding: '24px',\n        '& .MuiTextField-root': { display: 'block', m: 0.5, width: '25ch' },\n      }}\n    >\n      <TextField\n        name=\"name\"\n        label=\"Name\"\n        placeholder=\"Rob Stark\"\n        required\n        {...register('name')}\n        error={errors.name ? true : false}\n        helperText={errors.name?.message}\n        value={values.name}\n        onChange={e => handleChange({ ...values, name: e.target.value })}\n        size=\"small\"\n      />\n      <TextField\n        name=\"number\"\n        label=\"Phone number\"\n        placeholder=\"+380 00 000 00 00\"\n        required\n        {...register('number')}\n        error={errors.number ? true : false}\n        helperText={errors.number?.message}\n        value={values.number}\n        onChange={e => handleChange({ ...values, number: e.target.value })}\n        size=\"small\"\n      />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{ margin: '0 auto', width: '25ch' }}\n      >\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport { editContact } from 'redux/contactsOperations';\nimport { contactSchema } from 'components/ContactForm/ContactForm';\n\nimport { Box } from '@mui/system';\nimport { Button, TextField } from '@mui/material';\n\nconst EditForm = ({ contact, setOpen }) => {\n  const { id, name, number } = contact;\n\n  const [values, setValues] = useState({ name, number });\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    setValues(value);\n  };\n\n  const handleFormSubmit = values => {\n    const contactData = { id, name: values.name, number: values.number };\n    dispatch(editContact(contactData));\n    setOpen(false);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(contactSchema),\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      autoComplete=\"off\"\n      name=\"Edit Contact Form\"\n      onSubmit={handleSubmit(handleFormSubmit)}\n      sx={{\n        width: '650px',\n        margin: '0 auto',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-around',\n        columnGap: '32px',\n        border: `1px solid #093C01`,\n        borderRadius: '4px',\n        mb: '16px',\n        padding: '8px',\n        '& .MuiTextField-root': { display: 'block', m: 0.5, width: '25ch' },\n      }}\n    >\n      <TextField\n        name=\"name\"\n        label=\"Name\"\n        placeholder=\"Rob Stark\"\n        required\n        {...register('name')}\n        error={errors.name ? true : false}\n        helperText={errors.name?.message}\n        value={values.name}\n        onChange={e => handleChange({ ...values, name: e.target.value })}\n        size=\"small\"\n      />\n      <TextField\n        name=\"number\"\n        label=\"Phone number\"\n        placeholder=\"+380 00 000 00 00\"\n        required\n        {...register('number')}\n        error={errors.number ? true : false}\n        helperText={errors.number?.message}\n        value={values.number}\n        onChange={e => handleChange({ ...values, number: e.target.value })}\n        size=\"small\"\n      />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{ margin: '0 auto', width: '25ch' }}\n      >\n        Edit\n      </Button>\n    </Box>\n  );\n};\n\nEditForm.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n  setOpen: PropTypes.func,\n};\n\nexport default EditForm;\n","import PropTypes from 'prop-types';\n\nimport {\n  Box,\n  ButtonGroup,\n  IconButton,\n  ListItem,\n  Typography,\n} from '@mui/material';\nimport Loader from 'components/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nimport { deleteContact } from 'redux/contactsOperations';\nimport { selectIsLoading } from 'redux/selectors';\nimport { useState } from 'react';\nimport EditForm from 'components/EditForm';\n\nconst ContactListItem = ({ contact }) => {\n  const { id, name, number: phone } = contact;\n\n  const [open, setOpen] = useState(false);\n\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  return (\n    <ListItem sx={{ display: 'block', borderBottom: '1px solid #093C01' }}>\n      <Box\n        sx={{\n          width: '100%',\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          padding: '4px',\n        }}\n      >\n        <Typography sx={{ maxWidth: '300px' }}>{name}</Typography>\n        <Typography>{phone}</Typography>\n        <ButtonGroup>\n          <IconButton color=\"primary\" onClick={handleClick}>\n            <EditIcon />\n          </IconButton>\n          <IconButton\n            color=\"primary\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            {isLoading ? <Loader /> : <DeleteIcon />}\n          </IconButton>\n        </ButtonGroup>\n      </Box>\n      {open && <EditForm contact={contact} setOpen={setOpen} />}\n    </ListItem>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.exact({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n};\n\nexport default ContactListItem;\n","import { List } from '@mui/material';\nimport ContactListItem from 'components/ContactListItem';\nimport { useSelector } from 'react-redux';\n\n// import { List } from './ContactList.styled';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <List\n      sx={{\n        width: '700px',\n        margin: '0 auto',\n        padding: '12px',\n        border: '2px solid #093C01',\n        borderRadius: '4px',\n      }}\n    >\n      {filteredContacts.map(contact => {\n        return <ContactListItem contact={contact} key={contact.id} />;\n      })}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import { FormControl, OutlinedInput, Typography } from '@mui/material';\nimport { Box } from '@mui/system';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleInput = e => {\n    const filterValue = e.target.value.trim().toLowerCase();\n    console.log(filterValue);\n    dispatch(changeFilter(filterValue));\n  };\n\n  return (\n    <Box\n      sx={{\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        columnGap: '32px',\n        mb: '16px',\n        padding: '12px',\n      }}\n    >\n      <Typography>Find contacts by name</Typography>\n      <FormControl size=\"small\">\n        <OutlinedInput\n          autoComplete=\"off\"\n          name=\"filter\"\n          onChange={handleInput}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Loader from 'components/Loader';\n\nimport { fetchContacts } from 'redux/contactsOperations';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\nimport { Typography } from '@mui/material';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const isContacts = !isLoading && !error && contacts.length > 0;\n  const isContactsEmpty = !isLoading && !error && contacts.length === 0;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <ContactForm />\n      <Typography\n        variant=\"h3\"\n        color=\"primary\"\n        sx={{ textAlign: 'center', fontWeight: 'bold' }}\n      >\n        Contacts\n      </Typography>\n      <Filter />\n      {isContacts && <ContactList />}\n      {isContactsEmpty && (\n        <Typography variant=\"body1\" sx={{ textAlign: 'center' }}>\n          There is no contacts yet. Please, add a contact.\n        </Typography>\n      )}\n      {isLoading && (\n        <p>\n          <Loader width=\"16\" />\n        </p>\n      )}\n      {error && <p>{error}</p>}\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","filter","value","selectFilter","name","toLowerCase","includes","contactSchema","yup","shape","min","matches","required","number","phone","initialValues","useState","values","setValues","useSelector","dispatch","useDispatch","handleChange","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Box","component","autoComplete","onSubmit","undefined","find","contact","addContact","alert","sx","width","margin","display","alignItems","justifyContent","columnGap","border","borderRadius","mb","padding","m","TextField","label","placeholder","helperText","message","onChange","e","target","size","Button","type","variant","setOpen","id","contactData","editContact","open","ListItem","borderBottom","Typography","maxWidth","ButtonGroup","IconButton","color","onClick","Edit","deleteContact","Loader","Delete","filteredContacts","List","map","FormControl","OutlinedInput","filterValue","trim","console","log","changeFilter","isContacts","length","isContactsEmpty","useEffect","fetchContacts","textAlign","fontWeight"],"sourceRoot":""}