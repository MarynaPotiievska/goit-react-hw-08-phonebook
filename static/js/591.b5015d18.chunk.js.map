{"version":3,"file":"static/js/591.b5015d18.chunk.js","mappings":"kUAWMA,EAAiBC,EAAAA,SAAaC,MAAM,CACxCC,MAAOF,EAAAA,SAAaE,MAAM,oBAAoBC,SAAS,qBACvDC,SAAUJ,EAAAA,SAEPK,QACC,iEACA,8HAEDF,SAAS,0BAGRG,EAAgB,CACpBJ,MAAO,GACPE,SAAU,IAkFZ,EA/EkB,WAAO,IAAD,IACtB,GAA4BG,EAAAA,EAAAA,UAASD,GAArC,eAAOE,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnBJ,EAAUI,EACX,EAOD,GAIIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYjB,KAJtBkB,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OAKf,OACE,UAACE,EAAA,EAAD,CAAWC,GAAI,CAAEC,QAAS,QAA1B,WACE,SAACC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAQ,KACRJ,GAAI,CACFK,UAAW,SACXC,eAAgB,YAChBC,WAAY,QANhB,qBAWA,UAACC,EAAA,EAAD,CACEC,UAAU,OACVC,aAAa,MACbC,KAAK,aACLC,SAAUhB,GA9BS,SAAAV,GACvBE,GAASyB,EAAAA,EAAAA,IAAM3B,IACfC,EAAUH,EACX,IA4BKgB,GAAI,CACFc,QAAS,OACTC,cAAe,SACfC,WAAY,SACZf,QAAS,OACT,uBAAwB,CAAEa,QAAS,QAASG,EAAG,EAAGC,MAAO,SAV7D,WAaE,SAACC,EAAA,GAAD,gBACER,KAAK,QACLS,MAAM,aACNC,KAAK,QACLC,YAAY,gBACZzC,UAAQ,GACJc,EAAS,UANf,IAOE4B,QAAO1B,EAAOjB,MACd4C,WAAU,UAAE3B,EAAOjB,aAAT,aAAE,EAAc6C,QAC1BlC,MAAOL,EAAON,MACd8C,SAAU,SAAAC,GAAC,OAAIrC,GAAa,kBAAKJ,GAAN,IAAcN,MAAO+C,EAAEC,OAAOrC,QAA9C,MAEb,SAAC4B,EAAA,GAAD,gBACER,KAAK,WACLS,MAAM,gBACNC,KAAK,WACLC,YAAY,SACZzC,UAAQ,GACJc,EAAS,aANf,IAOE4B,QAAO1B,EAAOf,SACd0C,WAAU,UAAE3B,EAAOf,gBAAT,aAAE,EAAiB2C,QAC7BlC,MAAOL,EAAOJ,SACd4C,SAAU,SAAAC,GAAC,OAAIrC,GAAa,kBAAKJ,GAAN,IAAcJ,SAAU6C,EAAEC,OAAOrC,QAAjD,MAEb,SAACsC,EAAA,EAAD,CAAQR,KAAK,SAASjB,QAAQ,YAAYJ,GAAI,CAAE8B,OAAQ,UAAxD,yBAMP,EC9FD,EARc,WACZ,OACE,2BACE,SAAC,EAAD,KAGL,C","sources":["components/LogInForm/LogInForm.jsx","pages/LogIn.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\n\nimport { logIn } from 'redux/auth/operations';\n\nimport { Box } from '@mui/system';\nimport { Button, Container, TextField, Typography } from '@mui/material';\n\nconst registerSchema = yup.object().shape({\n  email: yup.string().email('Email is invalid').required('Email is required'),\n  password: yup\n    .string()\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*_=+-]).{6,12}$/,\n      'Password must consist of 6-12 characters including at least 1 uppercase, 1 lowercase, 1 number and 1 symbol (!@#$%^&*_=+-)'\n    )\n    .required('Password is required'),\n});\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst LogInForm = () => {\n  const [values, setValues] = useState(initialValues);\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    setValues(value);\n  };\n\n  const handleFormSubmit = values => {\n    dispatch(logIn(values));\n    setValues(initialValues);\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(registerSchema),\n  });\n\n  return (\n    <Container sx={{ padding: '12px' }}>\n      <Typography\n        color=\"primary\"\n        variant=\"h5\"\n        sx={{\n          textAlign: 'center',\n          textDecoration: 'underline',\n          fontWeight: 'bold',\n        }}\n      >\n        Log in\n      </Typography>\n      <Box\n        component=\"form\"\n        autoComplete=\"off\"\n        name=\"Login Form\"\n        onSubmit={handleSubmit(handleFormSubmit)}\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          padding: '12px',\n          '& .MuiTextField-root': { display: 'block', m: 1, width: '25ch' },\n        }}\n      >\n        <TextField\n          name=\"email\"\n          label=\"User email\"\n          type=\"email\"\n          placeholder=\"mail@mail.com\"\n          required\n          {...register('email')}\n          error={errors.email ? true : false}\n          helperText={errors.email?.message}\n          value={values.email}\n          onChange={e => handleChange({ ...values, email: e.target.value })}\n        />\n        <TextField\n          name=\"password\"\n          label=\"User password\"\n          type=\"password\"\n          placeholder=\"******\"\n          required\n          {...register('password')}\n          error={errors.password ? true : false}\n          helperText={errors.password?.message}\n          value={values.password}\n          onChange={e => handleChange({ ...values, password: e.target.value })}\n        />\n        <Button type=\"submit\" variant=\"contained\" sx={{ margin: '0 auto' }}>\n          Submit\n        </Button>\n      </Box>\n    </Container>\n  );\n};\n\nexport default LogInForm;\n","import LogInForm from 'components/LogInForm';\n\nconst LogIn = () => {\n  return (\n    <main>\n      <LogInForm />\n    </main>\n  );\n};\n\nexport default LogIn;\n"],"names":["registerSchema","yup","shape","email","required","password","matches","initialValues","useState","values","setValues","dispatch","useDispatch","handleChange","value","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Container","sx","padding","Typography","color","variant","textAlign","textDecoration","fontWeight","Box","component","autoComplete","name","onSubmit","logIn","display","flexDirection","alignItems","m","width","TextField","label","type","placeholder","error","helperText","message","onChange","e","target","Button","margin"],"sourceRoot":""}