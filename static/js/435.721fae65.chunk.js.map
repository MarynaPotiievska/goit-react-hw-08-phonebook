{"version":3,"file":"static/js/435.721fae65.chunk.js","mappings":"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","sources":["components/App.styled.jsx","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const AppTitle = styled.h1`\n  margin-bottom: 24px;\n  text-align: center;\n  font-weight: bold;\n  font-size: 36px;\n  line-height: 1.5;\n  color: #23537e;\n  text-shadow: 1px 1.5px 3.5px white, 0 5px 0.5px #23537e;\n`;\n\nexport const Title = styled.h2`\n  text-align: center;\n  font-weight: 900;\n  font-size: 28px;\n  line-height: 1.5;\n  color: #23537e;\n`;\n\nexport const DefaultMessage = styled.p`\n  padding: 12px;\n  text-align: center;\n`;\n","export const selectFilter = state => state.filter.value;\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = state => {\n\tconst filter = selectFilter(state);\n\tconst contacts = selectContacts(state);\n    if (filter !== '') {\n      const filteredArr = contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter)\n      );\n      return filteredArr;\n    } else {\n      return contacts;\n    }\n  };\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport 'yup-phone';\n\nimport { addContact } from 'redux/contactsOperations';\nimport { selectContacts } from 'redux/selectors';\n\n// import {\n//   AddContactForm,\n//   Button,\n//   ContactInput,\n//   Label,\n// } from './ContactForm.styled';\nimport { Box } from '@mui/system';\nimport { TextField } from '@mui/material';\n\nconst contactSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Name must be at least 2 characters')\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required('Name is required'),\n  number: yup\n    .string()\n    .phone('UA', 'Number must be a valid phone number for region UA.')\n    .required('Phone is required'),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst ContactForm = () => {\n  const [values, setValues] = useState(initialValues);\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleChange = value => {\n    setValues(value);\n  };\n\n  const handleFormSubmit = (e, values) => {\n    const form = e.target;\n    const isInContacts = contacts.find(\n      contact => contact.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (isInContacts === undefined) {\n      dispatch(addContact(values));\n    } else {\n      alert(`${values.name} is already in contacts.`);\n    }\n\n    form.reset();\n  };\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(contactSchema),\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      autoComplete=\"off\"\n      name=\"Add Contact Form\"\n      onSubmit={handleSubmit(handleFormSubmit)}\n    >\n      <TextField\n        name=\"name\"\n        label=\"Name\"\n        placeholder=\"Rob Stark\"\n        required\n        {...register('name')}\n        error={errors.name ? true : false}\n        helperText={errors.name?.message}\n        value={values.name}\n        onChange={e => handleChange({ ...values, name: e.target.value })}\n      />\n      <TextField\n        name=\"number\"\n        label=\"Phone number\"\n        placeholder=\"+380 00 000 00 00\"\n        required\n        {...register('number')}\n        error={errors.number ? true : false}\n        helperText={errors.number?.message}\n        value={values.number}\n        onChange={e => handleChange({ ...values, number: e.target.value })}\n      />\n    </Box>\n\n    // <Formik\n    //   initialValues={{ name: '', number: '' }}\n    //   validationSchema={contactSchema}\n    //   onSubmit={handleSubmit}\n    // >\n    //   <AddContactForm autoComplete=\"off\">\n    //     <Label>\n    //       Name\n    //       <ContactInput\n    //         type=\"text\"\n    //         name=\"name\"\n    //         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n    //         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    //       />\n    //       <ErrorMessage\n    //         name=\"name\"\n    //         component={Error}\n    //         message=\"Name must be at least 2 characters\"\n    //       />\n    //     </Label>\n    //     <Label>\n    //       Phone\n    //       <ContactInput\n    //         type=\"tel\"\n    //         name=\"number\"\n    //         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and must start with +\"\n    //       />\n    //       <ErrorMessage\n    //         name=\"number\"\n    //         component={Error}\n    //         message=\"Number must be a valid phone number for region UA.\"\n    //       />\n    //     </Label>\n    //     <Button type=\"submit\">Add contact</Button>\n    //   </AddContactForm>\n    // </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const AddContactForm = styled(Form)`\n  width: 400px;\n  margin: 0 auto;\n  margin-bottom: 24px;\n  padding: 12px;\n  border: 2.5px solid #3b85c5;\n  border-radius: 4px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 4px;\n  padding: 4px;\n`;\n\nexport const ContactInput = styled(Field)`\n  display: block;\n  border: 0.5px solid #3b85c5;\n  border-radius: 4px;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  padding: 4px;\n  border: 1px solid #3b85c5;\n  border-radius: 4px;\n  align-items: center;\n  background-color: #3b85c5;\n  color: #ffffff;\n  font-family: inherit;\n  font-size: 12px;\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled';\n\nimport { MdClose } from 'react-icons/md';\n\nimport { Button } from '../ContactForm/ContactForm.styled';\n\nexport const Contact = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 4px;\n  :not(:last-child) {\n    border-bottom: 0.5px solid #3b85c5;\n  }\n`;\n\nexport const ContactName = styled.span`\n  width: 200px;\n  font-weight: 500;\n`;\n\nexport const ContactNumber = styled.span`\n  width: 150px;\n  padding-left: 12px;\n  font-size: 12px;\n`;\n\nexport const ContactButton = Button.withComponent('button');\n\nexport const CloseIcon = styled(MdClose)`\n  display: block;\n`;\n","import Loader from 'components/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteContact } from 'redux/contactsOperations';\nimport { selectIsLoading } from 'redux/selectors';\n\nimport {\n  CloseIcon,\n  Contact,\n  ContactName,\n  ContactNumber,\n  ContactButton,\n} from './ContactListItem.styled';\n\nconst ContactListItem = ({ contact }) => {\n  const { id, name, phone } = contact;\n\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const hendleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <Contact id={id}>\n      <ContactName>{name}</ContactName>\n      <ContactNumber>{phone}</ContactNumber>\n      <ContactButton\n        type=\"button\"\n        onClick={() => {\n          hendleDelete(id);\n        }}\n      >\n        {isLoading ? <Loader /> : <CloseIcon />}\n      </ContactButton>\n    </Contact>\n  );\n};\n\nexport default ContactListItem;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  width: 500px;\n  margin: 0 auto;\n  padding: 12px;\n  border: 2.5px solid #3b85c5;\n  border-radius: 4px;\n`;\n","import ContactListItem from 'components/ContactListItem';\nimport { useSelector } from 'react-redux';\n\nimport { List } from './ContactList.styled';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nconst ContactList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <List>\n      {filteredContacts.map(contact => {\n        return <ContactListItem contact={contact} key={contact.id} />;\n      })}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterLabel = styled.label`\n  display: block;\n  padding: 8px;\n  margin-bottom: 8px;\n  text-align: center;\n  font-size: 12px;\n  font-weight: 500;\n`;\n\nexport const FilterInput = styled.input`\n  margin-left: 4px;\n  border: 0.5px solid #3b85c5;\n  border-radius: 4px;\n  outline: none;\n`;\n","import { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/filterSlice';\nimport { FilterInput, FilterLabel } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleInput = e => {\n    const filterValue = e.target.value.trim().toLowerCase();\n    dispatch(changeFilter(filterValue));\n  };\n\n  return (\n    <FilterLabel>\n      Find contacts by name\n      <FilterInput type=\"text\" name=\"name\" onChange={handleInput} />\n    </FilterLabel>\n  );\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { DefaultMessage, Title } from 'components/App.styled';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport Loader from 'components/Loader';\n\nimport { fetchContacts } from 'redux/contactsOperations';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\n\nconst Contacts = () => {\n  const contacts = useSelector(selectContacts);\n\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const isContacts = !isLoading && !error && contacts.length > 0;\n  const isContactsEmpty = !isLoading && !error && contacts.length === 0;\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <main>\n      <Title>Contacts</Title>\n      <ContactForm />\n      <Filter />\n      {isContacts && <ContactList />}\n      {isContactsEmpty && (\n        <DefaultMessage>\n          There is no contacts yet. Please, add a contact.\n        </DefaultMessage>\n      )}\n      {isLoading && (\n        <p>\n          <Loader width=\"16\" />\n        </p>\n      )}\n      {error && <p>{error}</p>}\n    </main>\n  );\n};\n\nexport default Contacts;\n"],"names":["Title","styled","DefaultMessage","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilteredContacts","filter","value","selectFilter","name","toLowerCase","includes","contactSchema","yup","shape","min","matches","required","number","phone","initialValues","useState","values","setValues","useSelector","dispatch","useDispatch","handleChange","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","Box","component","autoComplete","onSubmit","e","form","target","undefined","find","contact","addContact","alert","reset","TextField","label","placeholder","helperText","message","onChange","Button","Form","Field","Contact","ContactName","ContactNumber","ContactButton","withComponent","CloseIcon","MdClose","id","type","onClick","deleteContact","hendleDelete","Loader","List","filteredContacts","map","FilterLabel","FilterInput","filterValue","trim","changeFilter","isContacts","length","isContactsEmpty","useEffect","fetchContacts","width"],"sourceRoot":""}